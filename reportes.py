# Form implementation generated from reading ui file 'reportes.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QDate, QDateTime, Qt, QCoreApplication, QRect
from PyQt6.QtGui import QFont
from PyQt6.QtWidgets import QApplication, QMainWindow, QMessageBox, QTableWidgetItem, QPushButton
from pyexpat.errors import messages
import conexion
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib import colors
from datetime import datetime
from images import resource_path

class Ui_Reportes(QtWidgets.QWidget):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1259, 722)
        self.widget = QtWidgets.QWidget(parent=Form)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1271, 771))
        self.widget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.widget.setObjectName("widget")
        self.txtLogo = QtWidgets.QLabel(parent=self.widget)
        self.txtLogo.setGeometry(QtCore.QRect(1163, 5, 91, 71))
        self.txtLogo.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.txtLogo.setMidLineWidth(-2)
        self.txtLogo.setText("")
        #self.txtLogo.setPixmap(QtGui.QPixmap(":/logo2.PNG"))
        self.txtLogo.setPixmap(QtGui.QPixmap(resource_path("imagenes/logo2.PNG")))

        self.txtLogo.setScaledContents(True)
        self.txtLogo.setObjectName("txtLogo")
        self.frame = QtWidgets.QFrame(parent=self.widget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 1261, 80))
        self.frame.setStyleSheet("background-color: rgb(24, 71, 113);")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.frame.setObjectName("frame")
        self.label_3 = QtWidgets.QLabel(parent=self.frame)
        self.label_3.setGeometry(QtCore.QRect(530, 20, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code SemiBold")
        font.setPointSize(30)
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_3.setObjectName("label_3")
        self.btnRegresar = QtWidgets.QPushButton(parent=self.frame)
        self.btnRegresar.setGeometry(QtCore.QRect(20, 20, 161, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.btnRegresar.setFont(font)
        self.btnRegresar.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.btnRegresar.setStyleSheet("QPushButton {\n"
                                       "    border-radius: 10px;\n"
                                       "    background-color: rgb(239, 239, 239);\n"
                                       "    color:  rgb(24, 71, 113);\n"
                                       "}\n"
                                       "\n"
                                       "QPushButton:hover {\n"
                                       "    background-color: rgb(255, 255, 255);\n"
                                       "    color: rgb(24, 71, 113);\n"
                                       "}")
        self.btnRegresar.setObjectName("btnRegresar")
        self.widget_4 = QtWidgets.QWidget(parent=self.widget)
        self.widget_4.setGeometry(QtCore.QRect(70, 110, 1131, 181))
        self.widget_4.setStyleSheet("border: 1px solid rgb(239, 239, 239);\n"
                                    "border-radius: 8px;")
        self.widget_4.setObjectName("widget_4")
        self.label_2 = QtWidgets.QLabel(parent=self.widget_4)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 221, 16))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(12)
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.txtBuscarCliente = QtWidgets.QLineEdit(parent=self.widget_4)
        self.txtBuscarCliente.setGeometry(QtCore.QRect(230, 3, 231, 28))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(12)
        self.txtBuscarCliente.setFont(font)
        self.txtBuscarCliente.setStyleSheet("background-color: rgb(239, 239, 239);\n"
                                            "border-radius:8px;")
        self.txtBuscarCliente.setText("")
        self.txtBuscarCliente.setObjectName("txtBuscarCliente")
        self.cmbClientes = QtWidgets.QComboBox(parent=self.widget_4)
        self.cmbClientes.setGeometry(QtCore.QRect(20, 40, 441, 28))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(12)
        self.cmbClientes.setFont(font)
        self.cmbClientes.setStyleSheet("background-color: rgb(239, 239, 239);\n"
                                       "border-radius:4px;")
        self.cmbClientes.setObjectName("cmbClientes")
        self.cmbClientes.addItem("")
        self.cmbClientes.setItemText(0, "")
        self.btnBuscar_2 = QtWidgets.QPushButton(parent=self.widget_4)
        self.btnBuscar_2.setGeometry(QtCore.QRect(40, 100, 141, 41))
        font = QtGui.QFont()
        font.setBold(True)
        self.btnBuscar_2.setFont(font)
        self.btnBuscar_2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.btnBuscar_2.setStyleSheet("QPushButton {\n"
                                       "    border-radius: 20px;\n"
                                       "    background-color: rgb(24, 71, 113);\n"
                                       "    color: rgb(255, 255, 255);\n"
                                       "}\n"
                                       "\n"
                                       "QPushButton:hover {\n"
                                       "    background-color: rgb(255, 255, 255);\n"
                                       "    color: rgb(24, 71, 113);\n"
                                       "    border: 1px solid rgb(24, 71, 113);\n"
                                       "}")
        self.btnBuscar_2.setObjectName("btnBuscar_2")
        self.tableWidget = QtWidgets.QTableWidget(parent=self.widget_4)
        self.tableWidget.setGeometry(QtCore.QRect(480, 0, 621, 161))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        self.lblTotalReservas = QtWidgets.QLabel(parent=self.widget_4)
        self.lblTotalReservas.setGeometry(QtCore.QRect(230, 100, 221, 16))
        self.lblTotalReservas.setObjectName("lblTotalReservas")
        self.lblTotalGastado = QtWidgets.QLabel(parent=self.widget_4)
        self.lblTotalGastado.setGeometry(QtCore.QRect(230, 130, 111, 16))
        self.lblTotalGastado.setObjectName("lblTotalGastado")
        self.lblTotalReservas_2 = QtWidgets.QLabel(parent=self.widget_4)
        self.lblTotalReservas_2.setGeometry(QtCore.QRect(340, 100, 111, 16))
        self.lblTotalReservas_2.setObjectName("lblTotalReservas_2")
        self.lblTotalGastado_2 = QtWidgets.QLabel(parent=self.widget_4)
        self.lblTotalGastado_2.setGeometry(QtCore.QRect(340, 130, 111, 16))
        self.lblTotalGastado_2.setObjectName("lblTotalGastado_2")
        self.widget_5 = QtWidgets.QWidget(parent=self.widget)
        self.widget_5.setGeometry(QtCore.QRect(70, 300, 1131, 291))
        self.widget_5.setStyleSheet("border: 1px solid rgb(239, 239, 239);\n"
                                    "border-radius: 8px;")
        self.widget_5.setObjectName("widget_5")
        self.label_4 = QtWidgets.QLabel(parent=self.widget_5)
        self.label_4.setGeometry(QtCore.QRect(0, 10, 221, 16))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(12)
        font.setBold(True)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.cmbClientes_2 = QtWidgets.QComboBox(parent=self.widget_5)
        self.cmbClientes_2.setGeometry(QtCore.QRect(10, 40, 251, 28))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(12)
        self.cmbClientes_2.setFont(font)
        self.cmbClientes_2.setStyleSheet("background-color: rgb(239, 239, 239);\n"
                                         "border-radius:4px;")
        self.cmbClientes_2.setObjectName("cmbClientes_2")
        self.cmbClientes_2.addItem("")
        self.cmbClientes_2.setItemText(0, "")
        self.lblCantidadHabitacion = QtWidgets.QLabel(parent=self.widget_5)
        self.lblCantidadHabitacion.setGeometry(QtCore.QRect(290, 40, 221, 16))
        self.lblCantidadHabitacion.setObjectName("lblCantidadHabitacion")
        self.lblCantidadReservas = QtWidgets.QLabel(parent=self.widget_5)
        self.lblCantidadReservas.setGeometry(QtCore.QRect(290, 70, 221, 16))
        self.lblCantidadReservas.setObjectName("lblCantidadReservas")
        self.lblFacturacionTotal = QtWidgets.QLabel(parent=self.widget_5)
        self.lblFacturacionTotal.setGeometry(QtCore.QRect(290, 100, 221, 16))
        self.lblFacturacionTotal.setObjectName("lblFacturacionTotal")
        self.label_5 = QtWidgets.QLabel(parent=self.widget_5)
        self.label_5.setGeometry(QtCore.QRect(290, 10, 221, 16))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(12)
        font.setBold(True)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(parent=self.widget_5)
        self.label_6.setGeometry(QtCore.QRect(520, 10, 221, 16))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(12)
        font.setBold(True)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.btnBuscar_3 = QtWidgets.QPushButton(parent=self.widget_5)
        self.btnBuscar_3.setGeometry(QtCore.QRect(50, 80, 141, 41))
        font = QtGui.QFont()
        font.setBold(True)
        self.btnBuscar_3.setFont(font)
        self.btnBuscar_3.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.btnBuscar_3.setStyleSheet("QPushButton {\n"
                                       "    border-radius: 20px;\n"
                                       "    background-color: rgb(24, 71, 113);\n"
                                       "    color: rgb(255, 255, 255);\n"
                                       "}\n"
                                       "\n"
                                       "QPushButton:hover {\n"
                                       "    background-color: rgb(255, 255, 255);\n"
                                       "    color: rgb(24, 71, 113);\n"
                                       "    border: 1px solid rgb(24, 71, 113);\n"
                                       "}")
        self.btnBuscar_3.setObjectName("btnBuscar_3")
        self.lblserviciosextra = QtWidgets.QLabel(parent=self.widget_5)
        self.lblserviciosextra.setGeometry(QtCore.QRect(520, 40, 281, 16))
        self.lblserviciosextra.setObjectName("lblserviciosextra")
        self.lbltotalfacturacioservicios = QtWidgets.QLabel(parent=self.widget_5)
        self.lbltotalfacturacioservicios.setGeometry(QtCore.QRect(520, 70, 231, 16))
        self.lbltotalfacturacioservicios.setObjectName("lbltotalfacturacioservicios")
        self.lblpromdiasreserva = QtWidgets.QLabel(parent=self.widget_5)
        self.lblpromdiasreserva.setGeometry(QtCore.QRect(520, 100, 221, 16))
        self.lblpromdiasreserva.setObjectName("lblpromdiasreserva")
        self.tableWidget_2 = QtWidgets.QTableWidget(parent=self.widget_5)
        self.tableWidget_2.setGeometry(QtCore.QRect(20, 150, 681, 121))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(6)
        self.tableWidget_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(5, item)
        self.btnBuscar_4 = QtWidgets.QPushButton(parent=self.widget)
        self.btnBuscar_4.setGeometry(QtCore.QRect(230, 630, 211, 41))
        font = QtGui.QFont()
        font.setBold(True)
        self.btnBuscar_4.setFont(font)
        self.btnBuscar_4.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.btnBuscar_4.setStyleSheet("QPushButton {\n"
                                       "    border-radius: 20px;\n"
                                       "    background-color: rgb(24, 71, 113);\n"
                                       "    color: rgb(255, 255, 255);\n"
                                       "}\n"
                                       "\n"
                                       "QPushButton:hover {\n"
                                       "    background-color: rgb(255, 255, 255);\n"
                                       "    color: rgb(24, 71, 113);\n"
                                       "    border: 1px solid rgb(24, 71, 113);\n"
                                       "}")
        self.btnBuscar_4.setObjectName("btnBuscar_4")
        self.btnBuscar_4.clicked.connect(lambda: self.generar_pdf_reporte())

        self.btnBuscar_5 = QtWidgets.QPushButton(parent=self.widget)
        self.btnBuscar_5.setGeometry(QtCore.QRect(610, 630, 211, 41))
        font = QtGui.QFont()
        font.setBold(True)
        self.btnBuscar_5.setFont(font)
        self.btnBuscar_5.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.btnBuscar_5.setStyleSheet("QPushButton {\n"
                                       "    border-radius: 20px;\n"
                                       "    background-color: rgb(24, 71, 113);\n"
                                       "    color: rgb(255, 255, 255);\n"
                                       "}\n"
                                       "\n"
                                       "QPushButton:hover {\n"
                                       "    background-color: rgb(255, 255, 255);\n"
                                       "    color: rgb(24, 71, 113);\n"
                                       "    border: 1px solid rgb(24, 71, 113);\n"
                                       "}")
        self.btnBuscar_5.setObjectName("btnBuscar_5")
        self.frame.raise_()
        self.txtLogo.raise_()
        self.widget_4.raise_()
        self.widget_5.raise_()
        self.btnBuscar_4.raise_()
        self.btnBuscar_5.raise_()

        self.retranslateUi(Form)
        self.btnBuscar_5.clicked.connect(self.generar_pdf_por_habitacion)

        # Conexión del botón "Regresar" para volver a la ventana anterior
        self.btnRegresar.clicked.connect(self.open_regresar)
        # Conexión del botón "Generar" para reporte por cliente
        self.btnBuscar_2.clicked.connect(self.generar_reporte_por_cliente)
        # Conexión del botón "Generar" para reporte por habitación
        self.btnBuscar_3.clicked.connect(self.generar_reporte_clientes_habitacion)
        # Conexión de texto cambiado en la caja de búsqueda para filtrar clientes
        self.txtBuscarCliente.textChanged.connect(self.filtrar_clientes)
        # Conexión inicial para cargar clientes en el combo box al abrir la ventana
        self.cargar_clientes()
        # Conexión inicial para cargar tipos de habitación en el combo box al abrir la ventana
        self.cargar_tipos_habitacion()
        QtCore.QMetaObject.connectSlotsByName(Form)

    def open_regresar(self):
        self.close()
        self.ventana_prin.show()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_3.setText(_translate("Form", "REPORTES"))
        self.btnRegresar.setText(_translate("Form", "REGRESAR"))
        self.label_2.setText(_translate("Form", "REPORTE POR CLIENTE"))
        self.txtBuscarCliente.setPlaceholderText(_translate("Form", " Buscar cliente"))
        self.cmbClientes.setPlaceholderText(_translate("Form", " Seleccione un cliente"))
        self.btnBuscar_2.setText(_translate("Form", "GENERAR"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Reserva ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Tipo Habitación"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Fecha de Ingreso"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Fecha de Salida"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Estado"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Form", "Precio Total"))
        self.lblTotalReservas.setText(_translate("Form", "Total de Reservas:"))
        self.lblTotalGastado.setText(_translate("Form", "Total Gastado: "))
        self.lblTotalReservas_2.setText(_translate("Form", ""))
        self.lblTotalGastado_2.setText(_translate("Form", ""))
        self.label_4.setText(_translate("Form", "REPORTE POR HABITACIÓN"))
        self.cmbClientes_2.setPlaceholderText(_translate("Form", " Seleccione un tipo de habitación"))
        self.lblCantidadHabitacion.setText(_translate("Form", "Cantidad de Habitaciones"))
        self.lblCantidadReservas.setText(_translate("Form", "Cantidad de reservas"))
        self.lblFacturacionTotal.setText(_translate("Form", "Facturación Total"))
        self.label_5.setText(_translate("Form", "Reservas Relacionadas"))
        self.label_6.setText(_translate("Form", "Detalles sobre uso"))
        self.btnBuscar_3.setText(_translate("Form", "GENERAR"))
        self.lblserviciosextra.setText(_translate("Form", "Servicio extra favorito"))
        self.lbltotalfacturacioservicios.setText(_translate("Form", "Costo de servivio extra favorito:"))
        self.lblpromdiasreserva.setText(_translate("Form", "Promedio de días reservada"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Cliente ID"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Nombre"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Apellido"))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Fecha Ingreso"))
        item = self.tableWidget_2.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Fecha Salida"))
        item = self.tableWidget_2.horizontalHeaderItem(5)
        item.setText(_translate("Form", "Monto"))
        self.btnBuscar_4.setText(_translate("Form", "GENERAR PDF POR CLIENTE"))
        self.btnBuscar_5.setText(_translate("Form", "GENERAR PDF POR HABITACIÓN"))

    def generar_pdf_por_habitacion(self, filename=None):
        """
        Genera un PDF con la información del reporte por habitación.
        """
        try:
            tipo_habitacion = self.cmbClientes_2.currentData()

            # Validar tipo de habitación
            if not tipo_habitacion:
                QMessageBox.warning(None, "Advertencia", "Selecciona un tipo de habitación válido.")
                return

            # Generar un nombre único si no se proporciona filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = filename or f"reporte_habitacion_{tipo_habitacion}_{timestamp}.pdf"

            if not filename or filename == "False":  # Validación extra por seguridad
                QMessageBox.critical(None, "Error", "El nombre del archivo no es válido.")
                return

            # Crear el documento PDF
            pdf = SimpleDocTemplate(filename)

            # Contenedor para los elementos del PDF
            elementos = []

            # Título del PDF
            from reportlab.platypus import Paragraph
            from reportlab.lib.styles import getSampleStyleSheet
            estilos = getSampleStyleSheet()
            titulo = Paragraph(f"<b>Reporte por Habitación: {tipo_habitacion}</b>", estilos['Title'])
            elementos.append(titulo)

            # Espacio entre secciones
            elementos.append(Paragraph("<br/><br/>", estilos['Normal']))

            # Estadísticas generales
            sql_estadisticas = """
                SELECT COUNT(h.Habitacion_ID), COUNT(DISTINCT r.Reserva_ID), COALESCE(SUM(f.Monto), 0)
                FROM Habitacion h
                LEFT JOIN Reserva r ON h.Habitacion_ID = r.Habitacion_ID
                LEFT JOIN Factura f ON r.Reserva_ID = f.Reserva_ID
                WHERE h.Tipo = ?
            """
            estadisticas = conexion.resultadoSQL(sql_estadisticas, (tipo_habitacion,))
            total_habitaciones, total_reservas, facturacion_total = estadisticas[0]

            # Agregar estadísticas al PDF
            elementos.append(Paragraph(f"<b>Cantidad de Habitaciones:</b> {total_habitaciones}", estilos['Normal']))
            elementos.append(Paragraph(f"<b>Cantidad de Reservas:</b> {total_reservas}", estilos['Normal']))
            elementos.append(Paragraph(f"<b>Facturación Total:</b> S/{facturacion_total:.2f}", estilos['Normal']))
            elementos.append(Paragraph("<br/><br/>", estilos['Normal']))

            # Datos de clientes que reservaron esta habitación
            sql_clientes = """
                SELECT c.DNI_Cliente, c.Nombres || ' ' || c.Apellidos AS Nombre, r.Fech_Entrada, r.Fech_Salida, f.Monto
                FROM Cliente c
                JOIN Reserva r ON c.DNI_Cliente = r.DNI_Cliente
                JOIN Habitacion h ON r.Habitacion_ID = h.Habitacion_ID
                LEFT JOIN Factura f ON r.Reserva_ID = f.Reserva_ID
                WHERE h.Tipo = ?
            """
            clientes = conexion.resultadoSQL(sql_clientes, (tipo_habitacion,))
            data = [["DNI Cliente", "Nombre", "Fecha Entrada", "Fecha Salida", "Monto"]]
            for cliente in clientes:
                data.append([str(c) for c in cliente])

            # Crear tabla para los datos de clientes
            tabla_clientes = Table(data)
            tabla_clientes.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ]))

            # Agregar tabla al PDF
            elementos.append(tabla_clientes)

            # Crear el PDF
            pdf.build(elementos)

            # Mostrar mensaje de éxito
            QMessageBox.information(None, "Éxito", f"Reporte PDF generado exitosamente: {filename}")

        except Exception as e:
            QMessageBox.critical(None, "Error", f"No se pudo generar el PDF: {e}")

    def cargar_tipos_habitacion(self):
        """Carga los tipos de habitación en el combo box."""
        try:
            sql = "SELECT DISTINCT Tipo FROM Habitacion"
            tipos = conexion.resultadoSQL(sql)

            self.cmbClientes_2.clear()
            self.cmbClientes_2.addItem("Seleccione un tipo de habitación", None)
            for tipo, in tipos:
                self.cmbClientes_2.addItem(tipo, tipo)
        except Exception as e:
            QMessageBox.critical(None, "Error", f"No se pudo cargar la lista de tipos de habitación: {e}")

    def generar_reporte_clientes_habitacion(self):
        try:
            tipo_habitacion = self.cmbClientes_2.currentData()
            if not tipo_habitacion:
                QMessageBox.warning(None, "Advertencia", "Selecciona un tipo de habitación.")
                return

            # Estadísticas generales
            sql_estadisticas = """
                SELECT COUNT(h.Habitacion_ID), COUNT(DISTINCT r.Reserva_ID), COALESCE(SUM(f.Monto), 0)
                FROM Habitacion h
                LEFT JOIN Reserva r ON h.Habitacion_ID = r.Habitacion_ID
                LEFT JOIN Factura f ON r.Reserva_ID = f.Reserva_ID
                WHERE h.Tipo = ?
            """
            estadisticas = conexion.resultadoSQL(sql_estadisticas, (tipo_habitacion,))
            total_habitaciones, total_reservas, facturacion_total = estadisticas[0]

            self.lblCantidadHabitacion.setText(f"Cantidad de Habitaciones: {total_habitaciones}")
            self.lblCantidadReservas.setText(f"Cantidad de Reservas: {total_reservas}")
            self.lblFacturacionTotal.setText(f"Facturación Total: S/{facturacion_total:.2f}")

            # Servicios extras
            sql_servicios = """
                SELECT se.Descripcion, COUNT(se.ServiciosExtra_ID) AS TotalServicios, COALESCE(SUM(se.Precio), 0) AS TotalFacturado
                FROM Reserva r
                cross join ServiciosExtra se ON r.Reserva_ID = se.Reserva_ID
                JOIN Habitacion h ON r.Habitacion_ID = h.Habitacion_ID
                WHERE h.Tipo = ?
                GROUP BY se.Descripcion
                ORDER BY TotalServicios DESC
                LIMIT 1

            """
            servicios = conexion.resultadoSQL(sql_servicios, (tipo_habitacion,))
            if servicios:
                servicio_favorito, total_servicios, total_facturado = servicios[0]
                self.lblserviciosextra.setText(f"Servicio favorito: {servicio_favorito} ({total_servicios} veces)")
                self.lbltotalfacturacioservicios.setText(f"Costo de servicio favorito: S/{total_facturado:.2f}")
            else:
                self.lblserviciosextra.setText("Servicio favorito: N/A")
                self.lbltotalfacturacioservicios.setText("Facturación por servicios: S/0.00")

            # Promedio de días reservada
            sql_promedio_dias = """
                SELECT COALESCE(AVG(JULIANDAY(r.Fech_Salida) - JULIANDAY(r.Fech_Entrada)), 0)
                FROM Reserva r
                JOIN Habitacion h ON r.Habitacion_ID = h.Habitacion_ID
                WHERE h.Tipo = ?
            """
            promedio_dias = conexion.resultadoSQL(sql_promedio_dias, (tipo_habitacion,))
            self.lblpromdiasreserva.setText(f"Promedio de días reservada: {promedio_dias[0][0]:.1f} días")

            # Clientes que han reservado este tipo de habitación
            sql_clientes = """
                SELECT c.DNI_Cliente, c.Nombres, c.Apellidos, r.Fech_Entrada, r.Fech_Salida, f.Monto
                FROM Cliente c
                JOIN Reserva r ON c.DNI_Cliente = r.DNI_Cliente
                JOIN Habitacion h ON r.Habitacion_ID = h.Habitacion_ID
                LEFT JOIN Factura f ON r.Reserva_ID = f.Reserva_ID
                WHERE h.Tipo = ?
            """
            clientes = conexion.resultadoSQL(sql_clientes, (tipo_habitacion,))
            self.tableWidget_2.setRowCount(len(clientes))
            for row_index, cliente in enumerate(clientes):
                for col_index, data in enumerate(cliente):
                    item = QTableWidgetItem(str(data))
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                    self.tableWidget_2.setItem(row_index, col_index, item)

        except Exception as e:
            QMessageBox.critical(None, "Error", f"Ocurrió un error al generar el reporte: {e}")

    def cargar_clientes(self):
        try:
            sql = "SELECT DNI_Cliente, Nombres || ' ' || Apellidos AS Nombre FROM Cliente"
            clientes = conexion.resultadoSQL(sql)
            self.cmbClientes.clear()
            self.cmbClientes.addItem("Seleccione un cliente", None)
            for dni, nombre in clientes:
                self.cmbClientes.addItem(nombre, dni)
        except Exception as e:
            QMessageBox.critical(None, "Error", f"No se pudo cargar la lista de clientes: {e}")

    def filtrar_clientes(self):
        try:
            filtro = self.txtBuscarCliente.text().strip().lower()
            sql = """
                SELECT DNI_Cliente, Nombres || ' ' || Apellidos AS Nombre
                FROM Cliente
                WHERE LOWER(Nombres || ' ' || Apellidos) LIKE ?
            """
            clientes = conexion.resultadoSQL(sql, (f"%{filtro}%",))
            self.cmbClientes.clear()
            self.cmbClientes.addItem("Seleccione un cliente", None)
            for dni, nombre in clientes:
                self.cmbClientes.addItem(nombre, dni)
        except Exception as e:
            QMessageBox.critical(None, "Error", f"No se pudo filtrar clientes: {e}")

    def generar_reporte_por_cliente(self):
        try:
            dni_cliente = self.cmbClientes.currentData()
            if not dni_cliente:
                QMessageBox.warning(None, "Advertencia", "Selecciona un cliente válido.")
                return

            sql_reservas = """
                SELECT r.Reserva_ID, h.Tipo, r.Fech_Entrada, r.Fech_Salida, r.Estado, COALESCE(f.Monto, 0)
                FROM Reserva r
                JOIN Habitacion h ON r.Habitacion_ID = h.Habitacion_ID
                LEFT JOIN Factura f ON r.Reserva_ID = f.Reserva_ID
                WHERE r.DNI_Cliente = ?
            """
            reservas = conexion.resultadoSQL(sql_reservas, (dni_cliente,))
            self.tableWidget.setRowCount(len(reservas))

            for row_index, row in enumerate(reservas):
                for col_index, cell in enumerate(row):
                    item = QTableWidgetItem(str(cell))
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                    self.tableWidget.setItem(row_index, col_index, item)

            sql_totales = """
                SELECT COUNT(r.Reserva_ID), COALESCE(SUM(f.Monto), 0)
                FROM Reserva r
                LEFT JOIN Factura f ON r.Reserva_ID = f.Reserva_ID
                WHERE r.DNI_Cliente = ?
            """
            total_reservas, total_gastado = conexion.resultadoSQL(sql_totales, (dni_cliente,))[0]
            self.lblTotalReservas.setText(f"Total de Reservas: {total_reservas}")
            self.lblTotalGastado.setText(f"Total Gastado: S/{total_gastado:.2f}")
        except Exception as e:
            QMessageBox.critical(None, "Error", f"No se pudo generar el reporte: {e}")

    def generar_pdf_reporte(self, filename=None):
        """
        Genera un PDF con la información del reporte actual mostrado en la ventana.
        """
        try:
            # Generar un nombre único si no se proporciona filename
            if filename is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"reporte_cliente_{timestamp}.pdf"

            # Crear el documento PDF
            pdf = SimpleDocTemplate(filename, pagesize=letter)

            # Contenedor para los elementos del PDF
            elementos = []

            # Título del reporte
            from reportlab.platypus import Paragraph
            from reportlab.lib.styles import getSampleStyleSheet
            estilos = getSampleStyleSheet()
            titulo = Paragraph("<b>Reporte Generado</b>", estilos['Title'])
            elementos.append(titulo)

            # Espacio después del título
            elementos.append(Paragraph("<br/><br/>", estilos['Normal']))

            # Extraer datos de QTableWidget (tableWidget)
            headers = []
            data = []

            # Obtener encabezados
            for col in range(self.tableWidget.columnCount()):
                headers.append(self.tableWidget.horizontalHeaderItem(col).text())

            # Agregar encabezados a los datos
            data.append(headers)

            # Obtener las filas de la tabla
            for row in range(self.tableWidget.rowCount()):
                fila = []
                for col in range(self.tableWidget.columnCount()):
                    item = self.tableWidget.item(row, col)
                    fila.append(item.text() if item else "")
                data.append(fila)

            # Crear una tabla para el PDF
            tabla = Table(data)
            tabla.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),  # Fondo gris para encabezados
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),  # Texto blanco para encabezados
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),  # Alineación centrada
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),  # Fuente para encabezados
                ('FONTSIZE', (0, 0), (-1, -1), 10),  # Tamaño de fuente
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),  # Espaciado inferior encabezados
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),  # Fondo beige para datos
                ('GRID', (0, 0), (-1, -1), 1, colors.black),  # Líneas de la tabla
            ]))

            # Agregar la tabla al documento
            elementos.append(tabla)

            # Crear el PDF
            pdf.build(elementos)

            # Mostrar mensaje de éxito
            QMessageBox.information(None, "Éxito", f"Reporte PDF generado exitosamente: {filename}")

        except Exception as e:
            QMessageBox.critical(None, "Error", f"No se pudo generar el PDF: {e}")


    def __init__(self, ventana_principal):
        super().__init__()
        self.ventana_prin = ventana_principal
        self.setupUi(self)

class MainWindow(QMainWindow, Ui_Reportes):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
